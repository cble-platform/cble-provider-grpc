// Setup gRPC protobuf meta

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: cble.proto

package cble

import (
	context "context"
	common "github.com/cble-platform/cble-provider-grpc/pkg/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CBLE_Handshake_FullMethodName          = "/CBLE/Handshake"
	CBLE_RegisterProvider_FullMethodName   = "/CBLE/RegisterProvider"
	CBLE_UnregisterProvider_FullMethodName = "/CBLE/UnregisterProvider"
)

// CBLEClient is the client API for CBLE service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CBLEClient interface {
	// (DO NOT MODIFY)
	Handshake(ctx context.Context, in *common.HandshakeRequest, opts ...grpc.CallOption) (*common.HandshakeReply, error)
	RegisterProvider(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationReply, error)
	UnregisterProvider(ctx context.Context, in *UnregistrationRequest, opts ...grpc.CallOption) (*UnregistrationReply, error)
}

type cBLEClient struct {
	cc grpc.ClientConnInterface
}

func NewCBLEClient(cc grpc.ClientConnInterface) CBLEClient {
	return &cBLEClient{cc}
}

func (c *cBLEClient) Handshake(ctx context.Context, in *common.HandshakeRequest, opts ...grpc.CallOption) (*common.HandshakeReply, error) {
	out := new(common.HandshakeReply)
	err := c.cc.Invoke(ctx, CBLE_Handshake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cBLEClient) RegisterProvider(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationReply, error) {
	out := new(RegistrationReply)
	err := c.cc.Invoke(ctx, CBLE_RegisterProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cBLEClient) UnregisterProvider(ctx context.Context, in *UnregistrationRequest, opts ...grpc.CallOption) (*UnregistrationReply, error) {
	out := new(UnregistrationReply)
	err := c.cc.Invoke(ctx, CBLE_UnregisterProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CBLEServer is the server API for CBLE service.
// All implementations must embed UnimplementedCBLEServer
// for forward compatibility
type CBLEServer interface {
	// (DO NOT MODIFY)
	Handshake(context.Context, *common.HandshakeRequest) (*common.HandshakeReply, error)
	RegisterProvider(context.Context, *RegistrationRequest) (*RegistrationReply, error)
	UnregisterProvider(context.Context, *UnregistrationRequest) (*UnregistrationReply, error)
	mustEmbedUnimplementedCBLEServer()
}

// UnimplementedCBLEServer must be embedded to have forward compatible implementations.
type UnimplementedCBLEServer struct {
}

func (UnimplementedCBLEServer) Handshake(context.Context, *common.HandshakeRequest) (*common.HandshakeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedCBLEServer) RegisterProvider(context.Context, *RegistrationRequest) (*RegistrationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProvider not implemented")
}
func (UnimplementedCBLEServer) UnregisterProvider(context.Context, *UnregistrationRequest) (*UnregistrationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterProvider not implemented")
}
func (UnimplementedCBLEServer) mustEmbedUnimplementedCBLEServer() {}

// UnsafeCBLEServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CBLEServer will
// result in compilation errors.
type UnsafeCBLEServer interface {
	mustEmbedUnimplementedCBLEServer()
}

func RegisterCBLEServer(s grpc.ServiceRegistrar, srv CBLEServer) {
	s.RegisterService(&CBLE_ServiceDesc, srv)
}

func _CBLE_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.HandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CBLEServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CBLE_Handshake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CBLEServer).Handshake(ctx, req.(*common.HandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CBLE_RegisterProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CBLEServer).RegisterProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CBLE_RegisterProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CBLEServer).RegisterProvider(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CBLE_UnregisterProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CBLEServer).UnregisterProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CBLE_UnregisterProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CBLEServer).UnregisterProvider(ctx, req.(*UnregistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CBLE_ServiceDesc is the grpc.ServiceDesc for CBLE service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CBLE_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CBLE",
	HandlerType: (*CBLEServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _CBLE_Handshake_Handler,
		},
		{
			MethodName: "RegisterProvider",
			Handler:    _CBLE_RegisterProvider_Handler,
		},
		{
			MethodName: "UnregisterProvider",
			Handler:    _CBLE_UnregisterProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cble.proto",
}
