// Setup gRPC protobuf meta
syntax = "proto3";
option go_package = "github.com/cble-platform/cble-provider-grpc/pkg/provider";
import "common.proto";

// gRPC Service
service Provider {
  rpc Handshake(HandshakeRequest) returns (HandshakeReply) {}
  rpc Configure(ConfigureRequest) returns (ConfigureReply) {}
  rpc GenerateDependencies(GenerateDependenciesRequest)
      returns (GenerateDependenciesReply) {}
  rpc RetrieveData(RetrieveDataRequest) returns (RetrieveDataReply) {}
  rpc DeployResource(DeployResourceRequest) returns (DeployResourceReply) {}
  rpc DestroyResource(DestroyResourceRequest) returns (DestroyResourceReply) {}
  rpc GetConsole(GetConsoleRequest) returns (GetConsoleReply) {}
}

// Models
message Deployment {
  string id = 1;
  map<string, string> templateVars = 2;
}

message Resource {
  string id = 1;
  string key = 2;
  bytes object = 3;
}

message DependencyVars { map<string, string> vars = 1; }

// Configure
message ConfigureRequest { bytes config = 1; }

message ConfigureReply { bool success = 1; }

// GenerateDependencies
message GenerateDependenciesRequest { repeated Resource resources = 1; }

message GenerateDependenciesReply {
  bool success = 1;
  optional string errors = 2;
  repeated string dependencies = 3;
}

// RetrieveData
message RetrieveDataRequest {
  // From the *ent.Deployment
  Deployment deployment = 1;
  // From the *ent.Resource
  Resource resource = 2;
  // From the *ent.DeploymentNode
  map<string, string> vars = 3;
  // Map of maps from all dependency nodes
  map<string, DependencyVars> dependencyVars = 4;
}

message RetrieveDataReply {
  bool success = 1;
  optional string errors = 2;
  map<string, string> updatedVars = 3; // To update the *ent.DeploymentNode
}

// Deploy
message DeployResourceRequest {
  // From the *ent.Deployment
  Deployment deployment = 1;
  // From the *ent.Resource
  Resource resource = 2;
  // From the *ent.DeploymentNode
  map<string, string> vars = 3;
  // Map of maps from all dependency nodes
  map<string, DependencyVars> dependencyVars = 4;
}

message DeployResourceReply {
  bool success = 1;
  optional string errors = 2;
  map<string, string> updatedVars = 3; // To update the *ent.DeploymentNode
}

// Destroy
message DestroyResourceRequest {
  Deployment deployment = 1;    // From the *ent.Deployment
  Resource resource = 2;        // From the *ent.Resource
  map<string, string> vars = 3; // From the *ent.DeploymentNode
}

message DestroyResourceReply {
  bool success = 1;
  optional string errors = 2;
  map<string, string> updatedVars = 3; // To update the *ent.DeploymentNode
}

// GetConsole
message GetConsoleRequest {
  Resource resource = 1;        // From the *ent.Resource
  map<string, string> vars = 2; // From the *ent.DeploymentNode
}

message GetConsoleReply {
  bool success = 1;
  repeated string errors = 2;
  string console = 3;
}

// // GetResourceList
// enum ResourceType {
//   UNKNOWN = 0;
//   HOST = 1;
//   NETWORK = 2;
//   ROUTER = 3;
// }

// message GetResourceListRequest {
//   string deployment_id = 1;
//   bytes blueprint = 2;
//   google.protobuf.Struct templateVars = 3;
//   google.protobuf.Struct deployment_state = 4;
//   google.protobuf.Struct deployment_vars = 5;
// }

// message GetResourceListReply {
//   RPCStatus status = 1;
//   repeated string errors = 2;
//   string deployment_id = 3;
//   repeated Resource resources = 4;
// }