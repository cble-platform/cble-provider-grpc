// Setup gRPC protobuf meta

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: provider.proto

package provider

import (
	context "context"
	common "github.com/cble-platform/cble-provider-grpc/pkg/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Provider_Handshake_FullMethodName               = "/Provider/Handshake"
	Provider_Configure_FullMethodName               = "/Provider/Configure"
	Provider_ExtractResourceMetadata_FullMethodName = "/Provider/ExtractResourceMetadata"
	Provider_RetrieveData_FullMethodName            = "/Provider/RetrieveData"
	Provider_DeployResource_FullMethodName          = "/Provider/DeployResource"
	Provider_DestroyResource_FullMethodName         = "/Provider/DestroyResource"
	Provider_GetConsole_FullMethodName              = "/Provider/GetConsole"
	Provider_ResourcePower_FullMethodName           = "/Provider/ResourcePower"
)

// ProviderClient is the client API for Provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderClient interface {
	Handshake(ctx context.Context, in *common.HandshakeRequest, opts ...grpc.CallOption) (*common.HandshakeReply, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureReply, error)
	ExtractResourceMetadata(ctx context.Context, in *ExtractResourceMetadataRequest, opts ...grpc.CallOption) (*ExtractResourceMetadataReply, error)
	RetrieveData(ctx context.Context, in *RetrieveDataRequest, opts ...grpc.CallOption) (*RetrieveDataReply, error)
	DeployResource(ctx context.Context, in *DeployResourceRequest, opts ...grpc.CallOption) (*DeployResourceReply, error)
	DestroyResource(ctx context.Context, in *DestroyResourceRequest, opts ...grpc.CallOption) (*DestroyResourceReply, error)
	GetConsole(ctx context.Context, in *GetConsoleRequest, opts ...grpc.CallOption) (*GetConsoleReply, error)
	ResourcePower(ctx context.Context, in *ResourcePowerRequest, opts ...grpc.CallOption) (*ResourcePowerReply, error)
}

type providerClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderClient(cc grpc.ClientConnInterface) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) Handshake(ctx context.Context, in *common.HandshakeRequest, opts ...grpc.CallOption) (*common.HandshakeReply, error) {
	out := new(common.HandshakeReply)
	err := c.cc.Invoke(ctx, Provider_Handshake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureReply, error) {
	out := new(ConfigureReply)
	err := c.cc.Invoke(ctx, Provider_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ExtractResourceMetadata(ctx context.Context, in *ExtractResourceMetadataRequest, opts ...grpc.CallOption) (*ExtractResourceMetadataReply, error) {
	out := new(ExtractResourceMetadataReply)
	err := c.cc.Invoke(ctx, Provider_ExtractResourceMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) RetrieveData(ctx context.Context, in *RetrieveDataRequest, opts ...grpc.CallOption) (*RetrieveDataReply, error) {
	out := new(RetrieveDataReply)
	err := c.cc.Invoke(ctx, Provider_RetrieveData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) DeployResource(ctx context.Context, in *DeployResourceRequest, opts ...grpc.CallOption) (*DeployResourceReply, error) {
	out := new(DeployResourceReply)
	err := c.cc.Invoke(ctx, Provider_DeployResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) DestroyResource(ctx context.Context, in *DestroyResourceRequest, opts ...grpc.CallOption) (*DestroyResourceReply, error) {
	out := new(DestroyResourceReply)
	err := c.cc.Invoke(ctx, Provider_DestroyResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetConsole(ctx context.Context, in *GetConsoleRequest, opts ...grpc.CallOption) (*GetConsoleReply, error) {
	out := new(GetConsoleReply)
	err := c.cc.Invoke(ctx, Provider_GetConsole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ResourcePower(ctx context.Context, in *ResourcePowerRequest, opts ...grpc.CallOption) (*ResourcePowerReply, error) {
	out := new(ResourcePowerReply)
	err := c.cc.Invoke(ctx, Provider_ResourcePower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServer is the server API for Provider service.
// All implementations must embed UnimplementedProviderServer
// for forward compatibility
type ProviderServer interface {
	Handshake(context.Context, *common.HandshakeRequest) (*common.HandshakeReply, error)
	Configure(context.Context, *ConfigureRequest) (*ConfigureReply, error)
	ExtractResourceMetadata(context.Context, *ExtractResourceMetadataRequest) (*ExtractResourceMetadataReply, error)
	RetrieveData(context.Context, *RetrieveDataRequest) (*RetrieveDataReply, error)
	DeployResource(context.Context, *DeployResourceRequest) (*DeployResourceReply, error)
	DestroyResource(context.Context, *DestroyResourceRequest) (*DestroyResourceReply, error)
	GetConsole(context.Context, *GetConsoleRequest) (*GetConsoleReply, error)
	ResourcePower(context.Context, *ResourcePowerRequest) (*ResourcePowerReply, error)
	mustEmbedUnimplementedProviderServer()
}

// UnimplementedProviderServer must be embedded to have forward compatible implementations.
type UnimplementedProviderServer struct {
}

func (UnimplementedProviderServer) Handshake(context.Context, *common.HandshakeRequest) (*common.HandshakeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedProviderServer) Configure(context.Context, *ConfigureRequest) (*ConfigureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedProviderServer) ExtractResourceMetadata(context.Context, *ExtractResourceMetadataRequest) (*ExtractResourceMetadataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractResourceMetadata not implemented")
}
func (UnimplementedProviderServer) RetrieveData(context.Context, *RetrieveDataRequest) (*RetrieveDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveData not implemented")
}
func (UnimplementedProviderServer) DeployResource(context.Context, *DeployResourceRequest) (*DeployResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployResource not implemented")
}
func (UnimplementedProviderServer) DestroyResource(context.Context, *DestroyResourceRequest) (*DestroyResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyResource not implemented")
}
func (UnimplementedProviderServer) GetConsole(context.Context, *GetConsoleRequest) (*GetConsoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsole not implemented")
}
func (UnimplementedProviderServer) ResourcePower(context.Context, *ResourcePowerRequest) (*ResourcePowerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourcePower not implemented")
}
func (UnimplementedProviderServer) mustEmbedUnimplementedProviderServer() {}

// UnsafeProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServer will
// result in compilation errors.
type UnsafeProviderServer interface {
	mustEmbedUnimplementedProviderServer()
}

func RegisterProviderServer(s grpc.ServiceRegistrar, srv ProviderServer) {
	s.RegisterService(&Provider_ServiceDesc, srv)
}

func _Provider_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.HandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_Handshake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Handshake(ctx, req.(*common.HandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ExtractResourceMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractResourceMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ExtractResourceMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_ExtractResourceMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ExtractResourceMetadata(ctx, req.(*ExtractResourceMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_RetrieveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).RetrieveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_RetrieveData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).RetrieveData(ctx, req.(*RetrieveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_DeployResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DeployResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_DeployResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DeployResource(ctx, req.(*DeployResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_DestroyResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DestroyResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_DestroyResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DestroyResource(ctx, req.(*DestroyResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetConsole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetConsole(ctx, req.(*GetConsoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ResourcePower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourcePowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ResourcePower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_ResourcePower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ResourcePower(ctx, req.(*ResourcePowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Provider_ServiceDesc is the grpc.ServiceDesc for Provider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _Provider_Handshake_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Provider_Configure_Handler,
		},
		{
			MethodName: "ExtractResourceMetadata",
			Handler:    _Provider_ExtractResourceMetadata_Handler,
		},
		{
			MethodName: "RetrieveData",
			Handler:    _Provider_RetrieveData_Handler,
		},
		{
			MethodName: "DeployResource",
			Handler:    _Provider_DeployResource_Handler,
		},
		{
			MethodName: "DestroyResource",
			Handler:    _Provider_DestroyResource_Handler,
		},
		{
			MethodName: "GetConsole",
			Handler:    _Provider_GetConsole_Handler,
		},
		{
			MethodName: "ResourcePower",
			Handler:    _Provider_ResourcePower_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provider.proto",
}
