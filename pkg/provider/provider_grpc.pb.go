// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: provider.proto

package provider

import (
	context "context"
	common "github.com/cble-platform/cble-provider-grpc/pkg/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProviderServerClient is the client API for ProviderServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderServerClient interface {
	Handshake(ctx context.Context, in *common.HandshakeRequest, opts ...grpc.CallOption) (*common.HandshakeReply, error)
	DeployBlueprint(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployReply, error)
}

type providerServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderServerClient(cc grpc.ClientConnInterface) ProviderServerClient {
	return &providerServerClient{cc}
}

func (c *providerServerClient) Handshake(ctx context.Context, in *common.HandshakeRequest, opts ...grpc.CallOption) (*common.HandshakeReply, error) {
	out := new(common.HandshakeReply)
	err := c.cc.Invoke(ctx, "/ProviderServer/Handshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServerClient) DeployBlueprint(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployReply, error) {
	out := new(DeployReply)
	err := c.cc.Invoke(ctx, "/ProviderServer/DeployBlueprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServerServer is the server API for ProviderServer service.
// All implementations must embed UnimplementedProviderServerServer
// for forward compatibility
type ProviderServerServer interface {
	Handshake(context.Context, *common.HandshakeRequest) (*common.HandshakeReply, error)
	DeployBlueprint(context.Context, *DeployRequest) (*DeployReply, error)
	mustEmbedUnimplementedProviderServerServer()
}

// UnimplementedProviderServerServer must be embedded to have forward compatible implementations.
type UnimplementedProviderServerServer struct {
}

func (UnimplementedProviderServerServer) Handshake(context.Context, *common.HandshakeRequest) (*common.HandshakeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedProviderServerServer) DeployBlueprint(context.Context, *DeployRequest) (*DeployReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployBlueprint not implemented")
}
func (UnimplementedProviderServerServer) mustEmbedUnimplementedProviderServerServer() {}

// UnsafeProviderServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServerServer will
// result in compilation errors.
type UnsafeProviderServerServer interface {
	mustEmbedUnimplementedProviderServerServer()
}

func RegisterProviderServerServer(s grpc.ServiceRegistrar, srv ProviderServerServer) {
	s.RegisterService(&ProviderServer_ServiceDesc, srv)
}

func _ProviderServer_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.HandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServerServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProviderServer/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServerServer).Handshake(ctx, req.(*common.HandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderServer_DeployBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServerServer).DeployBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProviderServer/DeployBlueprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServerServer).DeployBlueprint(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProviderServer_ServiceDesc is the grpc.ServiceDesc for ProviderServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProviderServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProviderServer",
	HandlerType: (*ProviderServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _ProviderServer_Handshake_Handler,
		},
		{
			MethodName: "DeployBlueprint",
			Handler:    _ProviderServer_DeployBlueprint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provider.proto",
}
